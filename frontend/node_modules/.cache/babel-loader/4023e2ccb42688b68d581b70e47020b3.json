{"ast":null,"code":"var _jsxFileName = \"/home/antonio/dsVendas-sds3/frontend/src/components/BarChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    axios.get(`${REACT_APP_BASE_URL}/sales/amount-by-seller`).then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  const mockData = {\n    labels: {\n      categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    },\n    series: [{\n      name: \"% Sucesso\",\n      data: [43.6, 67.1, 67.7, 45.6, 71.1]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      xaxis: mockData.labels\n    },\n    series: mockData.series,\n    type: \"bar\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BarChart, \"BrO3SK3cfonfXPQf0S/g9IcS2a0=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/home/antonio/dsVendas-sds3/frontend/src/components/BarChart/index.tsx"],"names":["useEffect","useState","Chart","BarChart","chartData","setChartData","labels","categories","series","name","data","axios","get","REACT_APP_BASE_URL","then","response","myLabels","map","x","sellerName","mySeries","sum","options","plotOptions","bar","horizontal","mockData","xaxis"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;;AAeA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAgB;AAACK,IAAAA,MAAM,EAAE;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAT;AAA4BC,IAAAA,MAAM,EAAE,CAAC;AAACC,MAAAA,IAAI,EAAC,EAAN;AAAUC,MAAAA,IAAI,EAAC;AAAf,KAAD;AAApC,GAAhB,CAA1C;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,KAAK,CAACC,GAAN,CAAW,GAAEC,kBAAmB,yBAAhC,EACCC,IADD,CACOC,QAAD,IAAc;AAChB,YAAML,IAAI,GAAGK,QAAQ,CAACL,IAAtB;AACA,YAAMM,QAAQ,GAAGN,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGV,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAhB,MAAAA,YAAY,CAAC;AAACC,QAAAA,MAAM,EAAEU,QAAT;AAAmBR,QAAAA,MAAM,EAAEY;AAA3B,OAAD,CAAZ;AACH,KAPD;AAQH,GATQ,EASN,EATM,CAAT;AAWA,QAAME,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE;AACDC,QAAAA,UAAU,EAAE;AADX;AADI;AADD,GAAhB;AAQA,QAAMC,QAAQ,GAAG;AACbpB,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AADR,KADK;AAIbC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,WADV;AAEIC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AAFV,KADI;AAJK,GAAjB;AAcA,sBACE,QAAC,KAAD;AACE,IAAA,OAAO,EAAG,EAAE,GAAGY,OAAL;AAAcK,MAAAA,KAAK,EAAED,QAAQ,CAACpB;AAA9B,KADZ;AAEE,IAAA,MAAM,EAAEoB,QAAQ,CAAClB,MAFnB;AAGE,IAAA,IAAI,EAAC,KAHP;AAIE,IAAA,MAAM,EAAC;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA7CH;;GAAML,Q;;KAAAA,Q;AA+CJ,eAAeA,QAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\n\ntype SeriesData = {\n    name: string,\n    data: Number\n\n}\n\ntype ChartData = {\n    labels: {\n        categories: string[],\n    }\n    series: SeriesData[]\n}\n\nconst BarChart = () => {\n\n    const [chartData, setChartData] = useState < ChartData > ({labels: { categories: []}, series: [{name:\"\", data:[]}]})\n\n    useEffect(() => {\n        axios.get(`${REACT_APP_BASE_URL}/sales/amount-by-seller`)\n        .then((response) => {\n            const data = response.data as SaleSum[];\n            const myLabels = data.map(x => x.sellerName)\n            const mySeries = data.map(x => x.sum)\n\n            setChartData({labels: myLabels, series: mySeries})\n        })\n    }, [])\n\n    const options = {\n        plotOptions: {\n            bar: {\n                horizontal: true,\n            }\n        },\n    };\n    \n    const mockData = {\n        labels: {\n            categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n        },\n        series: [\n            {\n                name: \"% Sucesso\",\n                data: [43.6, 67.1, 67.7, 45.6, 71.1]                   \n            }\n        ]\n    };\n\n\n    \n    return (\n      <Chart \n        options={ { ...options, xaxis: mockData.labels } }\n        series={mockData.series}\n        type=\"bar\"\n        height=\"240\"\n     />\n    );\n  }\n  \n  export default BarChart;\n  "]},"metadata":{},"sourceType":"module"}